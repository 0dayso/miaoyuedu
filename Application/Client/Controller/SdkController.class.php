<?php
// +----------------------------------------------------------------------
// | 红薯网 [ 三合一模块下SDK统一调用控制器 ]
// +----------------------------------------------------------------------
// | Copyright (c) 2009-2015 http://www.hongshu.com All rights reserved.
// +----------------------------------------------------------------------
// | Version: v2.0
// +----------------------------------------------------------------------
// | Author: 果农  <zhanghaoping@hongshu.com>
// +----------------------------------------------------------------------
// | Date: 2017-03-20
// +----------------------------------------------------------------------
// | Last Modified by: 果农
// +----------------------------------------------------------------------
// | Last Modified time: 2017-03-20 12:56
// +----------------------------------------------------------------------
namespace Client\Controller;

use Client\Common\Controller;
use Client\Model\UserModel;
use Org\Util\String;

class SDKController extends Controller {
    public function _initialize() {
        parent::_initialize(); // TODO: Change the autogenerated stub
        if(CLIENT_NAME=='ios' || CLIENT_NAME=='android') {
            //如果不是客户端调用就直接扔出
        } else {
            _exit('请求失败！');
        }
    }

    public function getWechatUserinfoAction() {
        $result = array(
            'status'=>0,
            'message'=>'请求失败'
        );
        $code = I('post.code', '', 'trim');
        if(!$code) {
            $this->ajaxReturn($result);
        }
        \Think\Log::write ( print_r(array('get'=>$_GET, 'post'=>$_POST), 1), 'DEBUG' . "\n", '', LOG_PATH . 'sdk_wechat_code' );

        $data = array();
        if($code=='imtest') {
            $data['openid'] = $openid = 'o7osow-VLaBGBnx0eTTif3ciiyvk';
        } else {
            $config = C('WECHATLOGIN');
            require_once THINK_PATH . '/Library/Org/WxPayPubHelper/WechatPay.php';
            $config = array_change_key_case($config, CASE_UPPER);
            //为适应早期安卓客户端而设置
            if(CLIENT_NAME=='android') {
                $config['APPID'] = 'wx111d0b81a3faa894';
                $config['APPSECRET'] = 'db8b3b11b70ff8289512f730986e9bbf';
            }
            if(!isset($config['MCHID'])) {
                $config['MCHID'] = 'no';
            }
            if(!isset($config['KEY'])) {
                $config['KEY'] = 'no';
            }
//$this->ajaxReturn($config);
            //使用jsapi接口
            $jsApi = new \Org\WxPayPubHelper\JsApi_pub($config);

            $jsApi->setCode($code);

            $openid = trim($jsApi->getOpenId());
            $data = $jsApi->getUserinfo();
            if ($data['errcode']) {
                $result['message'] = '授权失败,请重试';
                $this->ajaxReturn($result);
            }
            if (!$openid) {
                $result['message'] = '授权失败,请重试';
                $this->ajaxReturn($result);
            }
            $data['unionid'] = $jsApi->unionid;
            $data['openid'] = $openid;
        }

        /**
         * 处理用户的微信信息到系统中
         */
        if ($data['unionid']) {
            $wuModel = D('WechatUsers');
            $where = array(
                'unionid' => $data['unionid'],
                'openid'  => $data['openid']
            );
            $result = $wuModel->where($where)->find();
            if (!$result) {
                //数据库中暂时没有这条记录
                unset($where['unionid']);
                $where['wid'] = 0;
                $result = $wuModel->where($where)->find();
                if (!$result) {
                    $result = $wuModel->token(false)->add($data);
                } else {
                    $data['id'] = $result['id'];
                    $result = $wuModel->token(false)->save($data);
                }
            }
        }

        $ologin = 4;
        $usermodel = new UserModel();
        $field = "uid, username, nickname, password, openid, is_deleted, is_locked, mobile, viplevel, groupid, money";
        $arr = $usermodel->getUserByOpenid($ologin, $openid, $field, $data['unionid']);
        if (!$arr) {
            $username = $usermodel->makeUsername();
            $password = \Org\Util\String::randString(12);

            $uid = $usermodel->add($username, $password, "", "");

            $data['n_nickname'] = trim(preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['nickname']));       //清除昵称中的utf8mb4字符

            $nickname = $usermodel->makeNickname($ologin, $data['n_nickname']);
            if ($uid) {
                $data = array();
                $data["oLogin"] = $ologin;
                $data["openid"] = $openid;
                $data['nickname'] = $nickname;
                $usermodel->updateUser($data, $uid);
            }
            $arr = array(
                'uid'      => $uid,
                'username' => $username,
                'password' => $usermodel->pwdEncrypt($password),
                'openid'   => $openid,
                'nickname' => $nickname
            );
        } else if ($openid != $arr['openid']) {
            $update = array(
                'oLogin' => $ologin,
                'openid' => $openid
            );
            $usermodel->updateUser($update, $arr['uid']);
        }

        $result = $usermodel->loginByUsernamePassword($arr);
        unset($usermodel);
        //IOS:                var params = '{"P30":"'+json.usercode+'","username":"'+json.nickname+'","fu":"'+forward_url+'","uid":"'+json.uid+'","nickname":"'+json.nickname+'","viplevel":"'+json.viplevel+'","groupid":"'+json.groupid+'","avatar":"'+json.avatar+'","isauthor":"'+json.isauthor+'"}';
        if($result) {
            $result['P30'] = $result['usercode'];
            //$result['arr'] = $arr;
            //$result['data'] = $data;
            unset($result['usercode']);
        } else {
            $result = array(
                'status'=>0,
                'message'=>'登录异常！'
            );
        }
        $this->ajaxReturn($result);
    }

    /**
     * 获取加密用的Key，默认值为：客户端名称@客户端使用的域名
     * @return mixed|string
     */
    private function _getKey(){
        $key = C('CLIENT.'.CLIENT_NAME.'.secret');
        if(!$key) {
            $key = CLIENT_NAME.'@'.C('CLIENT.'.CLIENT_NAME.'.domain');
        }
        return strtolower(md5($key));
    }

    /**
     * 获取指定参数序列的签名信息
     * @param array $param
     * @return string
     */
    private function _getSign($param = array()) {
        $result = '';
        if(!$param) {
            return $result;
        }
        ksort($param);
        $str = http_build_query($param);
        $key = $this->_getKey();
        return md5($key.$str);
    }

    /**
     * 处理请求信息，验证签名
     * @return mixed
     */
    private function _processQuery() {
        $query = I('get.', '', 'trim');
        if(!$query || !isset($query['sign'])) {
            _exit('', 500);
        }
        $sign = $query['sign'];
        unset($query['sign']);
        //计算出请求信息
        $str = $this->_getSign($query);
        if($str!=$sign) {
            //_exit('', 500);
        }
        return $query;
    }

    /**
     * 处理返回信息
     * @param $result
     */
    private function _processResult($result) {
        function _crypt($param, $key) {
            return base64_encode(xor_encode2(json_encode($param, 1), $key));
        }
        $result = array('status'=>1, 'result'=>_crypt($result, $this->_getKey()), 'sign'=>$this->_getSign($result));
        $this->ajaxReturn($result);
    }
    /**
     * 获取配置信息
     */
    public function getConfigAction(){
        $param = $this->_processQuery();
        $result = array(
            'status'=>0,
            'message'=>'请求失败！'
        );
        if(!isset($param['name']) || !isset($param['type'])) {
            $this->ajaxReturn($result);
        }
        $query = $param['name'].'_'.$param['type'];
        switch ($query) {
            //微信登录用的配置
            case 'wechat_login':
                $result = C('WECHATLOGIN');
                break;
            //微信支付用的配置
            case 'wechat_pay':
                $result = C('wechatandroidsdk');
                break;
            case 'ali_pay':
                $result = C('alipayandroidsdk');
                break;
            case 'ali_login':
                $result = C('ALILOGIN');
                break;
            case 'qq_login':
                $result = C('QQLOGIN');
                break;
            case 'sina_login':
                $result = C('SINALOGIN');
                break;
            case 'baidu_login':
                $result = C('BAIDULOGIN');
                break;
            default:
                $this->ajaxReturn($result);
                break;
        }
        $this->_processResult($result);
    }
}
